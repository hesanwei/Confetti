Index: ExplosionAnimator.java
===================================================================
--- ExplosionAnimator.java	(revision 15)
+++ ExplosionAnimator.java	(working copy)
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
- package tyrantgit.explosionfield;
+package tyrantgit.explosionfield;
 
 import android.animation.ValueAnimator;
 import android.graphics.Bitmap;
@@ -46,9 +46,12 @@
         mBound = new Rect(bound);
         int partLen = 15;
         mParticles = new Particle[partLen * partLen];
+        // roll in 0~1.
         Random random = new Random(System.currentTimeMillis());
         int w = bitmap.getWidth() / (partLen + 2);
         int h = bitmap.getHeight() / (partLen + 2);
+        // i=0,j=0  i=partLen+1,j=partLen+1  i=partLen+2,j=partLen+2 which have been droped.
+        // Particle[15x15] is waiting been drawn.
         for (int i = 0; i < partLen; i++) {
             for (int j = 0; j < partLen; j++) {
                 mParticles[(i * partLen) + j] = generateParticle(bitmap.getPixel((j + 1) * w, (i + 1) * h), random);
@@ -83,7 +86,10 @@
         f = mBound.centerY() + (Y * (random.nextFloat() - 0.5f));
         particle.baseCy = f;
         particle.cy = f;
-        particle.life = END_VALUE / 10 * random.nextFloat();
+
+        // start k threshold, some is quick, some is slow.
+        particle.life = 0.14f * random.nextFloat();
+        // stop k threshold, some is finish early, some is to the end.
         particle.overflow = 0.4f * random.nextFloat();
         particle.alpha = 1f;
         return particle;
@@ -135,15 +141,22 @@
                 alpha = 0f;
                 return;
             }
+            // real k
             normalization = (normalization - life) / (1f - life - overflow);
+            // real value
             float f2 = normalization * END_VALUE;
+            // if realk >=0.7f, start dismiss
             if (normalization >= 0.7f) {
                 f = (normalization - 0.7f) / 0.3f;
             }
             alpha = 1f - f;
+
             f = bottom * f2;
+            // 正态分布
             cx = baseCx + f;
+            // 对勾
             cy = (float) (baseCy - this.neg * Math.pow(f, 2.0)) - f * mag;
+            // 20% bigger 80% smaller
             radius = V + (baseRadius - V) * f2;
         }
     }
Index: ExplosionField.java
===================================================================
--- ExplosionField.java	(revision 15)
+++ ExplosionField.java	(working copy)
@@ -72,7 +72,7 @@
     }
 
     public void explode(Bitmap bitmap, Rect bound, long startDelay, long duration) {
-        final ExplosionAnimator explosion = new ExplosionAnimator(this, bitmap, bound);
+        final ExplosionAnimator explosion = new PieceAnimator(this, bitmap, bound);
         explosion.addListener(new AnimatorListenerAdapter() {
             @Override
             public void onAnimationEnd(Animator animation) {
